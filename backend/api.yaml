openapi: '3.0.0'

info:
  version: 1.0.0
  title: Nitori API
  description: API for cpp testing

servers:
  - url: http://127.0.0.1:3000/
    description: Dev-server
  - url: http://127.0.0.1:8080/api/v1/
    description: Webpack-dev-server

paths:
  /widgets/:
    get:
      summary: Get all existing widgets
      tags:
        - Widget
      responses:
        200:
          description: List of widgets
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/widgetId'

  /widgets/{widgetId}:
    get:
      summary: Get widget
      tags:
        - Widget
      parameters:
        - $ref: '#/components/parameters/widgetId'
      responses:
        200:
          description: Widget id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/widgetId'
        404:
          description: Widget does not exists

  /widgets/{widgetId}/test-specs:
    get:
      summary: Get filtered list of TestSpecs
      tags:
        - TestSpec
      parameters:
        - $ref: '#/components/parameters/widgetId'
        - name: limit
          description: Limit
          in: query
          required: false
          schema:
            type: number
            default: 100
        - name: skip
          description: Skip
          in: query
          required: false
          schema:
            type: number
            default: 0
        - name: name
          in: query
          schema:
            type: string
        - name: includeSources
          in: query
          required: false
          schema:
            type: boolean
      responses:
        200:
          description: List of TestSpecs
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TestSpecList'
    post:
      summary: Add TestSpec
      tags:
        - TestSpec
      parameters:
        - $ref: '#/components/parameters/widgetId'
        - name: name
          in: query
          required: true
          schema:
            type: string
        - name: description
          in: query
          required: true
          schema:
            type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: array
                  items:
                    type: string
                    format: binary
      responses:
        200:
          description: Added TestSpec
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExecOutput'

  /widgets/{widgetId}/test-specs/{testSpecId}:
    get:
      summary: Get TestSpecs by id
      tags:
        - TestSpec
      parameters:
        - $ref: '#/components/parameters/widgetId'
        - name: testSpecId
          in: path
          required: true
          schema:
            type: string
        - name: includeSources
          in: query
          required: false
          schema:
            type: boolean
      responses:
        '200':
          description: Specified TestSpec
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TestSpec'
        '404':
          description: Specified TestSpec not found

  /widgets/{widgetId}/test-targets:
    get:
      summary: Get list of TestTargets
      tags:
        - TestTarget
      parameters:
        - $ref: '#/components/parameters/widgetId'
        - name: limit
          description: Limit
          in: query
          required: false
          schema:
            type: number
            default: 100
        - name: skip
          description: Skip
          in: query
          required: false
          schema:
            type: number
            default: 0
        - name: testSpecId
          description: Filter by TestSpec id
          in: query
          required: false
          schema:
            type: string
        - name: timestampStart
          description: Filter by TestSpec timestamp range (end)
          in: query
          required: false
          schema:
            type: number
        - name: timestampEnd
          description: Filter by TestSpec timestamp range (end)
          in: query
          required: false
          schema:
            type: number
        - name: userDataId
          description: Filter by UserData userId
          in: query
          required: false
          schema:
            type: number
        - name: userDataLogin
          description: Filter by UserData login
          in: query
          required: false
          schema:
            type: string
        - name: userDataName
          description: Filter by UserData name
          in: query
          schema:
            type: string
        - name: userDataGroupId
          description: Filter by UserData groupId
          in: query
          required: false
          schema:
            type: number
        - name: userDataGroupName
          description: Filter by UserData groupId
          in: query
          required: false
          schema:
            type: string
      responses:
        200:
          description: List of TestTargets
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TestTargetList'
    post:
      summary: Submit new TestTarget
      tags:
        - TestTarget
      parameters:
        - $ref: '#/components/parameters/widgetId'
        - name: testSpecId
          description: TestSpec id to test with
          in: query
          schema:
            type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: array
                  items:
                    type: string
                    format: binary
      responses:
        200:
          description: TestTarget completed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TestTarget'

  /widgets/{widgetId}/test-targets/{testTargetId}:
    get:
      summary: Get TestTarget info by id
      tags:
        - TestTarget
      parameters:
        - $ref: '#/components/parameters/widgetId'
        - name: testTargetId
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: TestTarget info
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TestTarget'
        404:
          description: TestTarget does not exists


components:

  parameters:

    widgetId:
      name: widgetId
      description: Widget id
      in: path
      required: true
      schema:
        $ref: '#/components/schemas/widgetId'

  schemas:

    widgetId:
      type: string
      default: "0"

    SourceFile:
      type: object
      properties:
        data:
          type: string
        name:
          type: string

    TestSpec:
      type: object
      properties:
        _id:
          type: string
        name:
          type: string
        widgetId:
          type: string
        description:
          type: string
        timestamp:
          type: number
        sourceFiles:
          type: array
          items:
            $ref: '#/components/schemas/SourceFile'

    TestSpecList:
      type: array
      items:
        $ref: '#/components/schemas/TestSpec'

    ExecOutput:
      type: object
      properties:
        exitCode:
          type: integer
        stderr:
          type: string
        stdout:
          type: string

    UserData:
      type: object
      properties:
        usedId:
          type: number
        isAdmin:
          type: boolean
        login:
          type: string
        name:
          type: string
        groupId:
          type: number
        groupName:
          type: string

    TestTarget:
      type: object
      properties:
        _id:
          type: string
        timestamp:
          type: integer
        userData:
          $ref: '#/components/schemas/UserData'
        testSpecId:
          type: string
        compilerResult:
          $ref: '#/components/schemas/ExecOutput'
        linkerResult:
          $ref: '#/components/schemas/ExecOutput'
        runnerResult:
          $ref: '#/components/schemas/ExecOutput'
        sourceFiles:
          type: array
          items:
            $ref: '#/components/schemas/SourceFile'

    TestTargetList:
      type: array
      items:
        $ref: '#/components/schemas/TestTarget'