openapi: '3.0.0'

info:
  version: 1.0.0
  title: Nitori API
  description: API for cpp testing

servers:
  - url: http://127.0.0.1:3000/
    description: Dev-server
  - url: http://127.0.0.1:8080/api/v1/
    description: Webpack-dev-server

paths:
  /TestSpec:
    get:
      summary: Get TestSpecs by WID (Widged ID)
      parameters:
        - $ref: "#/components/parameters/WidgetID"
      responses:
        '200':
          description: List of TestSpecs
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TestSpecList'
    post:
      summary: Add TestSpec
      parameters:
        - $ref: "#/components/parameters/WidgetID"
        - name: name
          in: query
          required: true
          schema:
            type: string
        - name: description
          in: query
          required: true
          schema:
            type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: array
                  items:
                    type: string
                    format: binary
      responses:
        200:
          description: Added TestSpec
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExecOutput'

  /TestTarget:
    get:
      summary: Get TestTarget info by id
      parameters:
        - name: id
          in: query
          required: true
          schema:
            type: string
      responses:
        200:
          description: TestTarget info
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TestTargetResult'
        404:
          description: TestTarget does not exists

    post:
      summary: Submit source code to test
      parameters:
        - name: testSpecId
          description: TestSpec id to test with
          in: query
          schema:
            type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: array
                  items:
                    type: string
                    format: binary
      responses:
        200:
          description: TestTarget completed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TestTargetResult'

  /TestTargetList:
    get:
      summary: Get list of TestTargets
      parameters:
        - name: limit
          description: Limit
          in: query
          required: false
          schema:
            type: number
            default: 100
        - name: skip
          description: Skip
          in: query
          required: false
          schema:
            type: number
            default: 0
        - name: testSpecId
          description: Filter by TestSpec id
          in: query
          required: false
          schema:
            type: string
        - name: timestampStart
          description: Filter by TestSpec timestamp range (end)
          in: query
          required: false
          schema:
            type: number
        - name: timestampEnd
          description: Filter by TestSpec timestamp range (end)
          in: query
          required: false
          schema:
            type: number
        - name: userDataId
          description: Filter by UserData userId
          in: query
          required: false
          schema:
            type: number
        - name: userDataLogin
          description: Filter by UserData login
          in: query
          required: false
          schema:
            type: string
        - name: userDataName
          description: Filter by UserData name
          in: query
          schema:
            type: string
        - name: userDataGroupId
          description: Filter by UserData groupId
          in: query
          required: false
          schema:
            type: number
        - name: userDataGroupName
          description: Filter by UserData groupId
          in: query
          required: false
          schema:
            type: string
      responses:
        200:
          description: List of TestTargets
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TestTargetResultList'

  /Widget/list:
    get:
      summary: Get all existing widget ids
      responses:
        200:
          description: List of wIds
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/wid'

components:

  parameters:

    WidgetID:
      name: wid
      in: query
      description: WidgetID
      required: true
      schema:
        $ref: '#/components/schemas/wid'

  schemas:

    wid:
      type: string
      default: "0"

    TestSpec:
      type: object
      required:
        - name
        - wid
        - description
      properties:
        name:
          type: string
        wid:
          type: string
        description:
          type: string

    TestSpecList:
      type: array
      items:
        $ref: '#/components/schemas/TestSpec'

    ExecOutput:
      type: object
      properties:
        exitCode:
          type: integer
        stderr:
          type: string
        stdout:
          type: string

    UserData:
      type: object
      properties:
        usedId:
          type: number
        isAdmin:
          type: boolean
        login:
          type: string
        name:
          type: string
        groupId:
          type: number
        groupName:
          type: string

    TestTargetResult:
      type: object
      properties:
        timestamp:
          type: integer
        userData:
          $ref: '#/components/schemas/UserData'
        testSpecId:
          type: string
        compilerResult:
          $ref: '#/components/schemas/ExecOutput'
        linkerResult:
          $ref: '#/components/schemas/ExecOutput'
        runnerResult:
          $ref: '#/components/schemas/ExecOutput'

    TestTargetResultList:
      type: array
      items:
        $ref: '#/components/schemas/TestTargetResult'